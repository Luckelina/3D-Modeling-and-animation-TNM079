//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::DiffXm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j,k) - mGrid.GetValue(i-1,j,k))/mDx; }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::DiffXp(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i+1,j,k) - mGrid.GetValue(i,j,k))/mDx; }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::DiffXpm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i+1,j,k) - mGrid.GetValue(i-1,j,k))/(2*mDx); }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::Diff2Xpm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i+1,j,k) - 2*mGrid.GetValue(i,j,k) + mGrid.GetValue(i-1,j,k))/pow(mDx,2); }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::DiffYm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j,k) - mGrid.GetValue(i,j-1,k))/mDx; }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::DiffYp(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j+1,k) - mGrid.GetValue(i,j,k))/mDx; }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::DiffYpm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j+1,k) - mGrid.GetValue(i,j-1,k))/(2*mDx); }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::Diff2Ypm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j+1,k) - 2*mGrid.GetValue(i,j,k) + mGrid.GetValue(i,j-1,k))/pow(mDx,2); }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::DiffZm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j,k) - mGrid.GetValue(i,j,k-1))/mDx; }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::DiffZp(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j,k+1) - mGrid.GetValue(i,j,k))/mDx; }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::DiffZpm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j,k+1) - mGrid.GetValue(i,j,k-1))/(2*mDx); }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::Diff2Zpm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j,k+1) - 2*mGrid.GetValue(i,j,k) + mGrid.GetValue(i,j,k-1))/pow(mDx,2); }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::Diff2XYpm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i+1,j+1,k) - mGrid.GetValue(i+1,j-1,k) + mGrid.GetValue(i-1,j-1,k) - mGrid.GetValue(i-1,j+1,k))/(4*pow(mDx,2)); }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::Diff2YZpm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i,j+1,k+1) - mGrid.GetValue(i,j+1,k-1) + mGrid.GetValue(i,j-1,k-1) - mGrid.GetValue(i,j-1,k+1))/(4*pow(mDx,2)); }

//! \lab4
/*! Use the values in the grid (mGrid.GetValue) to compute the differentials */
// By convention, we use (i,j,k) to represent grid coordinates, while (x,y,z)
// represents world coordinates.
float LevelSet::Diff2ZXpm(size_t i, size_t j, size_t k) const 
{ return (mGrid.GetValue(i+1,j,k+1) - mGrid.GetValue(i+1,j,k-1) + mGrid.GetValue(i-1,j,k-1) - mGrid.GetValue(i-1,j,k+1))/(4*pow(mDx,2)); }



//! \lab4
/*!
 * Evaluates gradient at (x,y,z) through discrete finite difference scheme.
 */
glm::vec3 LevelSet::GetGradient(float x, float y, float z) const {
    TransformWorldToGrid(x,y,z);


    //glm::vec3 gradPositive = {DiffXp(x, y, z), DiffYp(x, y, z), DiffZp(x, y, z)}; // test one at a time
    //glm::vec3 gradNegative = {DiffXm(x, y, z), DiffYm(x, y, z), DiffZm(x, y, z)};
    glm::vec3 gradPosNeg = {DiffXpm(x, y, z), DiffYpm(x, y, z), DiffZpm(x, y, z)};  
    
    return gradPosNeg;
}
